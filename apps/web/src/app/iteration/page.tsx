'use client';

import { useEffect, useState, useCallback } from 'react';
import { getUser, getToken, ensureAuth } from '@/lib/auth';
import { useI18n } from '../_i18n/I18nProvider';
import { apiFetch } from '@/lib/api';
import { useTelegramTheme } from '../_providers/TelegramThemeProvider';
import { useSharedState } from '../_providers/SharedStateProvider';
import { GlassHeader } from '../_components/GlassHeader';
import BookCard from '../_components/BookCard';
import styles from './iteration-page.module.css';

const API = process.env.NEXT_PUBLIC_API_URL!;

type CandidateDto = {
    id: string;
    Book?: { 
        titleNorm?: string; 
        authorsNorm?: string[];
        year?: number;
        coverUrl?: string;
        isbn13?: string;
    };
    AddedBy?: { 
        id: string; 
        username?: string; 
        name?: string; 
        tgUserId?: string;
    };
    reason?: string;
};

type IterationDto = {
    id: string;
    name: string;
    status: 'PLANNED' | 'OPEN' | 'CLOSED';
    meetingDate?: string | null;
    closedAt?: string | null;
    Candidates?: CandidateDto[];
    voteCounts?: Record<string, number>;
    myVoteCandidateId?: string | null;
    winnerCandidateId?: string | null;
};

export default function IterationPage() {
    const { tg, isReady } = useTelegramTheme();
    const { state, updateIterationsCache, isCacheValid } = useSharedState();
    
    const [iter, setIter] = useState<IterationDto | null>(null);
    const [loading, setLoading] = useState(true);
    const [voting, setVoting] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<Set<string>>(new Set());
    const [showThankYou, setShowThankYou] = useState(false);
    const [isClient, setIsClient] = useState(false);

    useEffect(() => {
        setIsClient(true);
    }, []);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    useEffect(() => {
        if (isReady && tg && isClient) {
            tg.ready();
            tg.expand();
            tg.BackButton?.hide();
        }
    }, [isReady, tg, isClient]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–∏
    const loadIteration = useCallback(async (forceRefresh = false) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
        if (!forceRefresh && isCacheValid('iterationsCache', 5 * 60 * 1000) && state.iterationsCache.current) {
            console.log('[ITERATION] Using cached data');
            setIter(state.iterationsCache.current as IterationDto);
            if (state.iterationsCache.current.myVoteCandidateId) {
                setSelectedCandidateIds(new Set([state.iterationsCache.current.myVoteCandidateId as string]));
            }
            setLoading(false);
            return;
        }

        setLoading(true);
        setError(null);
        
        try {
            const token = getToken();
            const url = token ? `${API}/iterations/current/full` : `${API}/iterations/current`;
            const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}` } : {};
            
            const res = await apiFetch(url, { headers, label: 'iterations.current' });
            
            if (!res.ok) {
                if (res.status === 404) {
                    setIter(null);
                    return;
                }
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${res.status}`);
            }
            
            const data = await res.json();
            setIter(data);
            
            // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            updateIterationsCache(data, 'current');
            
            // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É
            if (data.myVoteCandidateId) {
                setSelectedCandidateIds(new Set([data.myVoteCandidateId]));
            }
            
        } catch (e) {
            console.error('[ITERATION] Load failed:', e);
            setError(e instanceof Error ? e.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        } finally {
            setLoading(false);
        }
    }, [isCacheValid, updateIterationsCache]);

    useEffect(() => {
        if (isClient) {
            loadIteration();
        }
    }, [isClient, loadIteration]);

    // –§—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const submitVote = useCallback(async () => {
        if (selectedCandidateIds.size === 0 || !iter || voting) return;

        setVoting(true);
        
        try {
            const token = await ensureAuth();
            if (!token) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
            }

            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ MainButton
            if (tg?.MainButton) {
                tg.MainButton.showProgress();
            }

            // Haptic feedback
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
            const candidateIds = Array.from(selectedCandidateIds);
            
            // –ü–æ–∫–∞ API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ–ª–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            // TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å API –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            const res = await apiFetch(`${API}/votes`, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ candidateId: candidateIds[0] }),
                label: 'votes.create'
            });

            if (!res.ok) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å');
            }

            // –£—Å–ø–µ—à–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }

            if (tg?.MainButton) {
                tg.MainButton.hideProgress();
                tg.MainButton.hide();
            }

            // –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            setShowThankYou(true);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            setTimeout(() => {
                loadIteration(true);
                setShowThankYou(false);
            }, 2000);

        } catch (error) {
            console.error('[VOTING] Error:', error);
            
            if (tg?.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('error');
            }

            if (tg?.MainButton) {
                tg.MainButton.hideProgress();
            }

            const msg = error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
            if (tg?.showAlert) {
                tg.showAlert(`–û—à–∏–±–∫–∞: ${msg}`);
            }
        } finally {
            setVoting(false);
        }
    }, [selectedCandidateIds, iter, voting, tg, loadIteration]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MainButton
    useEffect(() => {
        if (!isReady || !tg || !isClient) return;

        const canVote = iter?.status === 'OPEN' && 
                       selectedCandidateIds.size > 0 && 
                       !iter?.myVoteCandidateId; // –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        
        if (canVote) {
            const buttonText = selectedCandidateIds.size === 1 
                ? '–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å' 
                : `–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å (${selectedCandidateIds.size})`;
            
            tg.MainButton.setText(buttonText);
            tg.MainButton.show();
            
            const handleVote = () => submitVote();
            tg.MainButton.onClick(handleVote);
            
            return () => {
                tg.MainButton.offClick(handleVote);
            };
        } else {
            tg.MainButton.hide();
        }
    }, [iter, selectedCandidateIds, isReady, tg, isClient, submitVote]);

    const getVotePercentage = (candidateId: string): number => {
        if (!iter?.voteCounts) return 0;
        
        const totalVotes = Object.values(iter.voteCounts).reduce((sum, count) => sum + count, 0);
        if (totalVotes === 0) return 0;
        
        const candidateVotes = iter.voteCounts[candidateId] || 0;
        return Math.round((candidateVotes / totalVotes) * 100);
    };

    const renderIterationStatus = () => {
        if (!iter) return null;

        const statusConfig = {
            PLANNED: { 
                emoji: 'üü°', 
                text: '–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è', 
                color: 'var(--color-warning)', 
                bgColor: 'var(--color-warning-bg)' 
            },
            OPEN: { 
                emoji: 'üü¢', 
                text: '–û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', 
                color: 'var(--color-success)', 
                bgColor: 'var(--color-success-bg)' 
            },
            CLOSED: { 
                emoji: '‚ö´', 
                text: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', 
                color: 'var(--color-text-muted)', 
                bgColor: 'var(--color-bg-layer)' 
            },
        };

        const config = statusConfig[iter.status];

                 return (
             <div className={styles.iterationStatus} data-status={iter.status}>
                 <span className={styles.statusEmoji}>{config.emoji}</span>
                 <span className={styles.statusText}>
                     {config.text}
                 </span>
                 
                 {iter.meetingDate && (
                     <>
                         <span className={styles.statusSeparator}>‚Ä¢</span>
                         <span className={styles.meetingDate}>
                             {new Date(iter.meetingDate).toLocaleDateString('ru-RU', { timeZone: 'UTC' })}
                         </span>
                     </>
                 )}
             </div>
         );
    };

         const renderThankYou = () => (
         <div className={styles.thankYouOverlay}>
             <div className={styles.thankYouContent}>
                 <div className={styles.thankYouIcon}>
                     ‚ú®
                 </div>
                 <h2 className={styles.thankYouTitle}>
                     –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å!
                 </h2>
                 <p className={styles.thankYouText}>
                     –í–∞—à –≤—ã–±–æ—Ä —É—á—Ç—ë–Ω
                 </p>
             </div>
         </div>
     );

         if (!isClient) {
         return (
             <div className={styles.pageContainer}>
                 <div className={`skeleton ${styles.skeletonHeader}`} />
             </div>
         );
     }

         if (loading) {
         return (
             <div className={styles.pageContainer}>
                 <GlassHeader title="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" />
                 <div className="container">
                     <div className={`skeleton ${styles.skeletonStatus}`} />
                     <div className={styles.skeletonList}>
                         {Array.from({ length: 3 }).map((_, i) => (
                             <div key={i} className={`skeleton ${styles.skeletonCard}`} />
                         ))}
                     </div>
                 </div>
             </div>
         );
     }

         if (error) {
         return (
             <div className={styles.pageContainer}>
                 <GlassHeader title="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" />
                 <div className="container">
                     <div className={styles.errorContainer}>
                         <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                         <h3 className={styles.errorTitle}>
                             –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                         </h3>
                         <p className={styles.errorText}>
                             {error}
                         </p>
                         <button className="btn btn-primary" onClick={() => loadIteration()}>
                             –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                         </button>
                     </div>
                 </div>
             </div>
         );
     }

         if (!iter) {
         return (
             <div className={styles.pageContainer}>
                 <GlassHeader title="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" />
                 <div className="container">
                     <div className={styles.emptyState}>
                         <div className={styles.emptyIcon}>üìö</div>
                         <h3 className={styles.emptyTitle}>
                             –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                         </h3>
                         <p className={styles.emptyText}>
                             –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. 
                             –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ!
                         </p>
                     </div>
                 </div>
             </div>
         );
     }

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = isClient ? getUser() : null;
    const currentUserId = currentUser?.id;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ - —É–±–∏—Ä–∞–µ–º –∫–Ω–∏–≥–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const candidates = (iter.Candidates || []).filter(candidate => 
        candidate.AddedBy?.id !== currentUserId
    );
    const totalVotes = Object.values(iter.voteCounts || {}).reduce((sum, count) => sum + count, 0);

         return (
         <div className={styles.pageContainer}>
            {showThankYou && renderThankYou()}
            
            <GlassHeader 
                title={iter.name}
                subtitle={`${candidates.length} ${candidates.length === 1 ? '–∫–Ω–∏–≥–∞' : candidates.length < 5 ? '–∫–Ω–∏–≥–∏' : '–∫–Ω–∏–≥'} ‚Ä¢ ${totalVotes} ${totalVotes === 1 ? '–≥–æ–ª–æ—Å' : totalVotes < 5 ? '–≥–æ–ª–æ—Å–∞' : '–≥–æ–ª–æ—Å–æ–≤'}`}
            />
            
            <div className="container">
                {renderIterationStatus()}

                                 {/* Voting Instructions */}
                 {iter.status === 'OPEN' && (
                     <div className={styles.votingInstructions}>
                         <h3 className={styles.votingTitle}>
                             üó≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è
                         </h3>
                         <p className={styles.votingText}>
                             –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä
                         </p>
                     </div>
                 )}

                {/* Candidates List */}
                                 <div className={`stagger-children ${styles.candidatesList}`}>
                    {candidates.map((candidate, index) => {
                        const isSelected = selectedCandidateIds.has(candidate.id);
                        const isMyVote = iter.myVoteCandidateId === candidate.id;
                        const voteCount = iter.voteCounts?.[candidate.id] || 0;
                        const percentage = getVotePercentage(candidate.id);
                        const isWinner = iter.status === 'CLOSED' && iter.winnerCandidateId === candidate.id;

                        return (
                                                         <div
                                 key={candidate.id}
                                 className={styles.candidateItem}
                                 style={{ animationDelay: `${index * 30}ms` }}
                             >
                                <BookCard
                                    title={candidate.Book?.titleNorm || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞'}
                                    authors={candidate.Book?.authorsNorm || ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä']}
                                    year={candidate.Book?.year}
                                    coverUrl={candidate.Book?.coverUrl}
                                    variant="voting"
                                    isSelected={isSelected || isMyVote}
                                    isInteractive={iter.status === 'OPEN'}
                                    onClick={iter.status === 'OPEN' && !iter.myVoteCandidateId ? () => {
                                        setSelectedCandidateIds(prev => {
                                            const newSet = new Set(prev);
                                            if (newSet.has(candidate.id)) {
                                                newSet.delete(candidate.id);
                                            } else {
                                                // –ü–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π
                                                // TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                                                return new Set([candidate.id]);
                                            }
                                            return newSet;
                                        });
                                    } : undefined}
                                    badges={[
                                        ...(isMyVote ? ['–í–∞—à –≥–æ–ª–æ—Å'] : []),
                                        ...(isWinner ? ['üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å'] : []),
                                    ]}
                                                                         footer={
                                         <div className={styles.cardFooter}>
                                             {/* Vote progress bar */}
                                             {(iter.status === 'CLOSED' || voteCount > 0) && (
                                                 <div className={styles.voteProgress}>
                                                     <span className={styles.voteCount}>
                                                         {voteCount} {voteCount === 1 ? '–≥–æ–ª–æ—Å' : voteCount < 5 ? '–≥–æ–ª–æ—Å–∞' : '–≥–æ–ª–æ—Å–æ–≤'}
                                                     </span>
                                                     <span className={styles.votePercentage}>
                                                         {percentage}%
                                                     </span>
                                                 </div>
                                             )}
                                             
                                             {(iter.status === 'CLOSED' || voteCount > 0) && (
                                                 <div className={styles.progressBar}>
                                                     <div 
                                                         className={`${styles.progressFill} ${isWinner ? styles.winnerProgress : ''}`}
                                                         style={{ width: `${percentage}%` }}
                                                     />
                                                 </div>
                                             )}

                                             {/* Added by info */}
                                             {candidate.AddedBy && (
                                                 <div className={styles.addedByInfo}>
                                                     <span className={styles.addedByLabel}>
                                                         –ü—Ä–µ–¥–ª–æ–∂–∏–ª:
                                                     </span>
                                                     <span className={styles.addedByName}>
                                                         {candidate.AddedBy.name || candidate.AddedBy.username || '–ê–Ω–æ–Ω–∏–º'}
                                                     </span>
                                                 </div>
                                             )}
                                         </div>
                                     }
                                />
                            </div>
                        );
                    })}
                </div>
            </div>
        </div>
    );
}